generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique(map: "User_email_key")
  name         String?
  password     String?
  avatar       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  role         String?      
  birthday     String?
  gender       String?
  refreshToken String?
  phone        String?
  seeker       Seeker?
  employer     Employer?
}

model Seeker {
  id     String @id @default(uuid())
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  summary      String?       @db.Text
  education    Education[]
  experience   Experience[]
  skills       Skill[]
  application  Application[]
  savedJobs    SavedJobs[]
  resume       String?
  coverLetter  String?       @db.Text
  links        Links[]
  desireSalary String?
  startDate    DateTime?
  license      License[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
}

model License {
  id           String  @id @default(uuid())
  name         String?
  organization String?
  description  String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seekerId String
  seeker   Seeker @relation(fields: [seekerId], references: [id])

  @@index([seekerId])
}

model Skill {
  id       String @id @default(uuid())
  name     String @unique
  seekerId String
  seeker   Seeker @relation(fields: [seekerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([seekerId])
}

model Links {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seekerId String
  seeker   Seeker @relation(fields: [seekerId], references: [id])

  @@index([seekerId])
}

model Education {
  id          String   @id @default(uuid())
  startDate   String
  endDate     String
  title       String
  institution String
  description String?  @db.Text
  GPA         Float?
  
  seekerId    String
  seeker      Seeker   @relation(fields: [seekerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([seekerId])
}

model Experience {
  id               String @id @default(uuid())
  startDate        String
  endDate          String
  location         String
  position         String
  companyName      String
  responsibilities String @db.Text

  seekerId  String
  seeker    Seeker   @relation(fields: [seekerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([seekerId])
}

model SavedJobs {
  id         String   @id @default(uuid())
  seekerId   String
  seeker     Seeker   @relation(fields: [seekerId], references: [id])
  jobAds     JobAds   @relation(fields: [jobAdsId], references: [id])
  jobAdsId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isBookmark Boolean  @default(false)

  @@index([jobAdsId])
  @@index([seekerId])
}

model Employer {
  id            String   @id @default(uuid())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?  @unique
  accountName   String?
  accountNumber String?
  jobAds        JobAds[]
  company       Company?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model JobAds {
  id           String   @id @default(uuid())
  title        String
  description  String   @db.Text
  requirements String   @db.Text
  salary       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  location     String?
  workType     String
  payType      String

  employer   Employer @relation(fields: [employerId], references: [id])
  employerId String

  application Application[]

  savedJobsId String?
  savedJobs    SavedJobs[]

  @@index([employerId])
}

model Application {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  status    String
  seeker    Seeker?  @relation(fields: [seekerId], references: [id])
  seekerId  String
  jobAds    JobAds   @relation(fields: [jobAdsId], references: [id])
  jobAdsId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobAdsId])
  @@index([seekerId])
}

model Company {
  id          String    @id @default(uuid())
  name        String
  logo        String?
  header      String?
  website     String?
  industry    String?
  size        Int?
  location    String?
  description String?   @db.Text
  benefit     String?
  contactInfo String
  address     Address?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employerId  String?   @unique
  employer    Employer? @relation(fields: [employerId], references: [id])

  @@index([employerId])
}

model Address {
  id        String   @id @default(uuid())
  street    String?
  province  String?
  regency   String?
  district  String?
  village   String?
  postCode  String?
  
  companyId String?  @unique
  company   Company? @relation(fields: [companyId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}